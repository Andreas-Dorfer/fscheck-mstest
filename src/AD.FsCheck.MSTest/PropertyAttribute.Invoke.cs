// <auto-generated> This file was generated from 'PropertyAttribute.Invoke.tt'. </auto-generated>
using System.Reflection;

namespace AD.FsCheck.MSTest;

public partial class PropertyAttribute
{
    static readonly MethodInfo Invoke1MethodInfo = typeof(PropertyAttribute).GetMethod(nameof(Invoke1), BindingFlags.Static | BindingFlags.NonPublic)!;

    static Property Invoke1<T1>(Action<object[]> method) =>
        Prop.ForAll<T1>(values => method(new object[] { values! }));

    static readonly MethodInfo Invoke2MethodInfo = typeof(PropertyAttribute).GetMethod(nameof(Invoke2), BindingFlags.Static | BindingFlags.NonPublic)!;

    static Property Invoke2<T1, T2>(Action<object[]> method) =>
        Prop.ForAll<Tuple<T1, T2>>(values => method(new object[] { values.Item1!, values.Item2! }));

    static readonly MethodInfo Invoke3MethodInfo = typeof(PropertyAttribute).GetMethod(nameof(Invoke3), BindingFlags.Static | BindingFlags.NonPublic)!;

    static Property Invoke3<T1, T2, T3>(Action<object[]> method) =>
        Prop.ForAll<Tuple<T1, T2, T3>>(values => method(new object[] { values.Item1!, values.Item2!, values.Item3! }));

    static readonly MethodInfo Invoke4MethodInfo = typeof(PropertyAttribute).GetMethod(nameof(Invoke4), BindingFlags.Static | BindingFlags.NonPublic)!;

    static Property Invoke4<T1, T2, T3, T4>(Action<object[]> method) =>
        Prop.ForAll<Tuple<T1, T2, T3, T4>>(values => method(new object[] { values.Item1!, values.Item2!, values.Item3!, values.Item4! }));

    static readonly MethodInfo Invoke5MethodInfo = typeof(PropertyAttribute).GetMethod(nameof(Invoke5), BindingFlags.Static | BindingFlags.NonPublic)!;

    static Property Invoke5<T1, T2, T3, T4, T5>(Action<object[]> method) =>
        Prop.ForAll<Tuple<T1, T2, T3, T4, T5>>(values => method(new object[] { values.Item1!, values.Item2!, values.Item3!, values.Item4!, values.Item5! }));

    static readonly MethodInfo Invoke6MethodInfo = typeof(PropertyAttribute).GetMethod(nameof(Invoke6), BindingFlags.Static | BindingFlags.NonPublic)!;

    static Property Invoke6<T1, T2, T3, T4, T5, T6>(Action<object[]> method) =>
        Prop.ForAll<Tuple<T1, T2, T3, T4, T5, T6>>(values => method(new object[] { values.Item1!, values.Item2!, values.Item3!, values.Item4!, values.Item5!, values.Item6! }));

    static readonly MethodInfo Invoke7MethodInfo = typeof(PropertyAttribute).GetMethod(nameof(Invoke7), BindingFlags.Static | BindingFlags.NonPublic)!;

    static Property Invoke7<T1, T2, T3, T4, T5, T6, T7>(Action<object[]> method) =>
        Prop.ForAll<Tuple<T1, T2, T3, T4, T5, T6, T7>>(values => method(new object[] { values.Item1!, values.Item2!, values.Item3!, values.Item4!, values.Item5!, values.Item6!, values.Item7! }));

    MethodInfo GetInvokeMethodInfo(int count)=>
        count switch
        {
            0 => throw new InvalidOperationException($"Properties must have at least one parameter."),
            1 => Invoke1MethodInfo,
            2 => Invoke2MethodInfo,
            3 => Invoke3MethodInfo,
            4 => Invoke4MethodInfo,
            5 => Invoke5MethodInfo,
            6 => Invoke6MethodInfo,
            7 => Invoke7MethodInfo,
            _ => throw new InvalidOperationException($"The number of property parameters is limited to 7. The actual number is {count}.")
        };
}
