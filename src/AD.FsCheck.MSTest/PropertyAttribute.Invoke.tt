<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#const int count = 7; #>
// <auto-generated> This file was generated from 'PropertyAttribute.Invoke.tt'. </auto-generated>
#nullable enable
using FsCheck.Fluent;
using System.Diagnostics.CodeAnalysis;
using System.Reflection;

namespace AD.FsCheck.MSTest;

public partial class PropertyAttribute
{
    static Property Combine<T>(IArbMap arbMap, Func<T, Property> action) => Prop.ForAll(arbMap.ArbFor<T>(), action);

    static readonly MethodInfo Invoke1MethodInfo = typeof(PropertyAttribute).GetMethod(nameof(Invoke1), BindingFlags.Static | BindingFlags.NonPublic)!;

    static Property Invoke1<T1>(IArbMap arbMap, Func<object[], bool> method) =>
        Prop.ForAll<T1>(v => method(new object[] { v! }));

<#
string types = "T1";
string values = "";
for(int i = 1; i <= count; i++)
{
    if(i > 1)
    {
#>
    static readonly MethodInfo Invoke<#= i #>MethodInfo = typeof(PropertyAttribute).GetMethod(nameof(Invoke<#= i #>), BindingFlags.Static | BindingFlags.NonPublic)!;

    static Property Invoke<#= i #><<#= types #>>(IArbMap arbMap, Func<object[], bool> method) =>
        Combine<T1>(arbMap, v => Invoke<#= i - 1 #><<#= types.Replace("T1, ", "") #>>(arbMap, values => method([v!, <#= values #>])));

<#
    }
    types += ", T" + (i + 1).ToString();
    if(i == 1)
    {
        values = "values[0]!";
    }
    else
    {
        values += ", values[" + (i - 1) + "]";
    }
}
#>
    bool TryGetInvokeMethodInfo(int count, [NotNullWhen(true)] out MethodInfo? methodInfo, [NotNullWhen(false)] out string? errorMsg)
    {
        methodInfo = null;
        errorMsg = null;

        switch (count)
        {
            case 0:
                errorMsg = "Properties must have at least one parameter.";
                return false;
<#
for(int i = 1; i <= count; i++)
{
#>
            case <#= i #>:
                methodInfo = Invoke<#= i #>MethodInfo;
                return true;
<#
}
#>
            default:
                errorMsg = $"The number of property parameters is limited to <#= count #>. The actual number is {count}.";
                return false;
                
        }
    }
}
